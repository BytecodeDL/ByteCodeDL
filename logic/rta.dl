#pragma once
#include "inputDeclaration.dl"
#include "utils.dl"

.comp RTA{
    .decl EntryPoint(simplename:symbol, descriptor:symbol, class:Class)
    .decl Reachable(method:Method, step:number)
    .decl SinkDesc(simplename:symbol, class:Class)
    .decl SinkMethod(method:Method)
    .decl EntryMethod(method:Method)
    .decl BanCaller(method:Method)

    .decl CallGraph(insn:Insn, caller:Method, callee:Method)
    .decl InstantiatedClass(insn:Insn, class:Class)

    SinkMethod(method) :-
        SinkDesc(simplename, class),
        SubEqClass(subeqclass, class),
        !ClassModifier("abstract", subeqclass),
        MethodInfo(method, simplename, _, subeqclass, _, _, _).

    EntryMethod(method),
    Reachable(method, 0) :-
        EntryPoint(simplename, descriptor, class),
        Dispatch(simplename, descriptor, class, method).

    Reachable(callee, n+1),
    CallGraph(insn, caller, callee) :-
        Reachable(caller, n),
        !BanCaller(caller),
        n < MAXSTEP,
        SpecialMethodInvocation(insn, _, callee, _, caller).

    Reachable(callee, n+1),
    CallGraph(insn, caller, callee) :-
        Reachable(caller, n),
        !BanCaller(caller),
        n < MAXSTEP,
        StaticMethodInvocation(insn, _, callee, caller).

    InstantiatedClass(insn, class) :-
        Reachable(method, _),
        AssignHeapAllocation(insn, _, heap, _, method, _),
        NormalHeap(heap, class).

    Reachable(callee, n+1),
    CallGraph(insn, caller, callee) :-
        Reachable(caller, n),
        !BanCaller(caller),
        n < MAXSTEP,
        VirtualMethodInvocation(insn, _, method, receiver, caller),
        MethodInfo(method, simplename, _, _, _, descriptor, _),
        VarType(receiver, class),
        SubEqClass(subeqclass, class),
        !ClassModifier("abstract", subeqclass),
        InstantiatedClass(_, subeqclass),
        Dispatch(simplename, descriptor, subeqclass, callee).

    Reachable(callee, n+1),
    CallGraph(insn, caller, callee) :-
        Reachable(caller, n),
        !BanCaller(caller),
        n < MAXSTEP,
        StaticMethodInvocation(insn, _, method, caller),
        MethodInfo(method, "doPrivileged", _, "java.security.AccessController", _, _, _),
        ActualParam(0, insn, param),
        VarType(param, class),
        MethodInfo(callee, "run", _, class, _, _, 0).
    
    // RTAO is RTA OPTIMIZATION LEVEL
    #if RTAO > 0

    .decl SinkReachable(method:Method, sink:Method, step:number)

    SinkReachable(sink, sink, 0) :-
        SinkMethod(sink).

    SinkReachable(caller, sink, n+1) :-
        n < MAXSTEP,
        SinkReachable(callee, sink, n),
        CallGraph(_, caller, callee).

    #endif

    #if RTAO > 1

    .decl ShortestPathToSink(caller:Method, sink:Method, step:number)

    ShortestPathToSink(entry, sink, n) :-
        n = min step : {SinkReachable(entry, sink, step)},
        SinkMethod(sink),
        EntryMethod(entry).

    ShortestPathToSink(callee, sink, n-1) :-
        n < MAXSTEP + 1,
        ShortestPathToSink(caller, sink, n),
        SinkReachable(callee, sink, n-1),
        CallGraph(_, caller, callee).

    #endif

    .decl RefinedReachable(method:Method)

    #ifdef RTAO
        #if RTAO == 1
            RefinedReachable(method) :-
                SinkReachable(method, _, _).
        #endif
        #if RTAO == 2
            RefinedReachable(method) :-
                ShortestPathToSink(method, _, _).
        #endif
    #else
        RefinedReachable(method) :-
            Reachable(method, _).
    #endif

    .decl CallNode(node:Method, label:symbol)
    .output CallNode

    CallNode(node, "method") :-
        !EntryMethod(node),
        !SinkMethod(node),
        RefinedReachable(node).

    CallNode(node, "sink") :-
        RefinedReachable(node),
        SinkMethod(node).

    CallNode(node, "entry") :-
        RefinedReachable(node),
        EntryMethod(node).

    .decl CallEdge(caller:Method, callee:Method)
    .output CallEdge

    CallEdge(caller, callee) :-
        RefinedReachable(caller),
        RefinedReachable(callee),
        CallGraph(_, caller, callee).
}