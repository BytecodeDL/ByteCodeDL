#include "pt-noctx.dl"

.comp PTaint{
    .init cipt = ContextInsensitivePt

    .decl NewTaintedValue(insn:Insn, type:Class, heap:Heap)
    .decl Leak(insn:Insn, heap:Heap)
    .decl SourceMethod(method:Method, type:Class)
    .decl SinkMethod(method:Method, n:number)
    .decl Tainted(insn:Insn, heap:Heap)

    .decl SanitizeMethod(method:Method)

    .decl BaseToRetTransfer(method:Method, type:Class)
    .decl ArgToRetTransfer(method:Method, n:number, type:Class)
    .decl IsTaintedFrom(insn:Insn, from:Var, to:Var, type:Class)
    .decl TransferTaint(heap:Heap, newHeapType:Class, newHeap:Heap)
    
    
    // taint arg to param
    cipt.VarPointsTo(heap, param) :- 
        cipt.CallGraph(insn, _, callee),
        ActualParam(n, insn, arg),
        FormalParam(n, callee, param),
        cipt.VarPointsTo(heap, arg),
        Tainted(_, heap),
        !SanitizeMethod(callee).
    
    
    Tainted(insn, heap),
    NewTaintedValue(insn, type, heap),
    cipt.VarPointsTo(heap, to) :-
        SourceMethod(callee, type),
        cipt.CallGraph(insn, _, callee),
        AssignReturnValue(insn, to),
        heap = cat("NewTainted::", insn).
    
    Leak(insn, heap) :-
        cipt.CallGraph(insn, _, callee),
        SinkMethod(callee, n),
        ActualParam(n, insn, arg),
        cipt.VarPointsTo(heap, arg),
        Tainted(_, heap).

    IsTaintedFrom(insn, base, ret, type) :-
        cipt.CallGraph(insn, _, callee),
        BaseToRetTransfer(callee, type),
        VirtualMethodInvocation(insn, _, _, base, _),
        AssignReturnValue(insn, ret).
    
    IsTaintedFrom(insn, arg, ret, type) :-
        cipt.CallGraph(insn, _, callee),
        ArgToRetTransfer(callee, n, type),
        ActualParam(n, insn, arg),
        AssignReturnValue(insn, ret).

    Tainted(insn, newHeap),
    TransferTaint(heap, type, newHeap),
    cipt.VarPointsTo(newHeap, var) :- 
        IsTaintedFrom(insn, from, to, type),
        cipt.VarPointsTo(heap, from),
        Tainted(_, heap),
        newHeap = cat("TransferTaint::", insn),
        cipt.VarPointsTo(oldHeap, to),
        AssignHeapAllocation(_, _, oldHeap, var, _, _).
}